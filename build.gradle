import java.nio.file.Files
import java.util.zip.ZipInputStream

group 'catumbre'
version '1.0-SNAPSHOT'

apply plugin: 'java'

compileJava.options.encoding = 'UTF-8'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	jcenter()
}

dependencies {
	compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.16.12'

	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.5'
	compile group: 'org.quartz-scheduler', name: 'quartz', version: '2.2.3'
	compile group: 'net.java.dev.jna', name: 'jna', version: '4.2.2'
	compile group: 'com.github.bdeneuter', name: 'dbus-java', version: '2.7'

	compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.22'
	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.7'
	compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.7'

	runtime fileTree(dir: 'lib', include: ['*.so'])
}

jar {
	manifest {
		attributes(
				'Main-Class': 'org.rl.scheduled.turnoff.MainController',
				'Class-Path': '. ' + configurations.compile.collect({ it.name }).join(' ')
		)
	}
}

task deploy(type: Sync) {
	dependsOn build
	from jar.archivePath
	from configurations.compile
	from configurations.runtime
	from 'src/dist/config'
	into new File('Z:\\Projects\\scheduled-turnoff').canonicalFile
}

task dbusLib {
	def libUnixEntry = 'lib/libunix-java.so'
	def absoluteSoFile = new File(projectDir, libUnixEntry)

	outputs.file absoluteSoFile
	outputs.dir absoluteSoFile.parent
	build.dependsOn dbusLib

	doLast {
		new ZipInputStream(new URL('http://www.java2s.com/Code/JarDownload/dbus/dbus-java-2.7.jar.zip').newInputStream())
				.withStream { zipIs ->
			for (def zipEntry = zipIs.nextEntry; zipEntry != null; zipEntry = zipIs.nextEntry) {
				if (zipEntry.name == 'dbus-java-2.7.jar') {
					new ZipInputStream(zipIs).withStream { jarStream ->
						for (def jarEntry = jarStream.nextEntry; jarEntry != null; jarEntry = jarStream.nextEntry) {
							if (jarEntry.name == libUnixEntry) {
								absoluteSoFile.parentFile.mkdirs()
								Files.copy(jarStream, absoluteSoFile.toPath())
								return
							}
						}
					}

					return
				}
			}
		}
	}
}