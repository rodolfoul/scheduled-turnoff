import java.nio.file.Files
import java.util.zip.ZipFile
import java.util.zip.ZipInputStream

group 'catumbre'
version '1.0-SNAPSHOT'

apply plugin: 'java'

compileJava.options.encoding = 'UTF-8'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	jcenter()
}

dependencies {
	compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.16.12'

	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.5'
	compile group: 'org.quartz-scheduler', name: 'quartz', version: '2.2.3'
	compile group: 'net.java.dev.jna', name: 'jna', version: '4.2.2'
	compile group: 'com.github.bdeneuter', name: 'dbus-java', version: '2.7'

	compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.22'
	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.7'
	compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.7'

	compile fileTree(dir: 'lib', include: ['*.so'])
}

jar {
	manifest {
		attributes(
				'Main-Class': 'org.rl.scheduled.turnoff.MainController',
				'Class-Path': configurations.compile.collect({ it.name }).join(' ') + ' .'
		)
	}
}

task t <<{
	println configurations.compile.collect {it.name}
}

task deploy(type: Sync) {
	dependsOn build
	from jar.archivePath
	from configurations.compile
	into new File('Z:\\Projects\\scheduled-turnoff').canonicalFile
}

task dbusDependency() {
	def libDir = new File(projectDir, 'lib')
	outputs.dir libDir

	doLast {
		def jarPath
		new ZipInputStream(new URL('http://www.java2s.com/Code/JarDownload/dbus/dbus-java-2.7.jar.zip').newInputStream())
				.withStream { zipIs ->
			jarPath = new File(libDir, zipIs.getNextEntry().getName()).absoluteFile
			jarPath.parentFile.mkdirs()
			Files.copy(zipIs, jarPath.toPath())
		}
	}
}
compileJava.dependsOn dbusDependency

task dbusLibExtract() {
	def soName = "libunix-java.so"
	def soLib = new File("$projectDir/lib/$soName")
	def dbusJar = new File("$projectDir/lib/dbus-java-2.7.jar")

	dependsOn dbusDependency
	outputs.file soLib
	inputs.file dbusJar

	doLast {
		def jarFile = new ZipFile(dbusJar)
		jarFile.getInputStream(jarFile.getEntry("lib/$soName")).withStream { zipIs ->
			soLib.withOutputStream {
				it << zipIs
			}
		}
	}
}
build.dependsOn dbusLibExtract